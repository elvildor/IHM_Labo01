<UserControl x:Class="PostIt.View.PostItView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:conv="clr-namespace:PostIt.View.Converter"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800"
             Width="200" Height="200"
             Padding="20"
             FontSize="24">
    <UserControl.Resources>
        <conv:ColorToBrushConverter x:Key="ColorToBrush"/>
        <BooleanToVisibilityConverter x:Key="BoolToVis"/>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border CornerRadius="15" x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <!--<Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding Path=DarkenColorBrush, Converter={StaticResource ColorToBrush}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding Path=DarkenColorBrush, Converter={StaticResource ColorToBrush}}"/>
                            </Trigger>-->
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TextBlockStyle1" TargetType="{x:Type TextBlock}">
            <Setter Property="TextWrapping" Value="NoWrap"/>
            <Setter Property="TextTrimming" Value="None"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="DarkRed"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid Background="Transparent">

            <Grid.Resources>
                <Style TargetType="{x:Type Grid}">
                    <EventSetter Event="PreviewMouseLeftButtonDown" Handler="ItemPreviewMouseLeftButtonDown" />
                </Style>
            </Grid.Resources>
            <Grid.Effect>
                <DropShadowEffect Color="Black" Opacity="0.2" BlurRadius="15" Direction="315" ShadowDepth="6"/>
            </Grid.Effect>

            <Polygon Points="0,0 160,0 160,140 140,160 0,160" 
                     Stroke="{Binding Path=LightenColorBrush, Converter={StaticResource ColorToBrush}}" 
                     HorizontalAlignment="Left" VerticalAlignment="Top">
                <Polygon.Fill>
                    <LinearGradientBrush StartPoint="0,0.5" EndPoint="0,1">
                        <GradientStop Color="{Binding Path=LightenColorBrush}" Offset="0.0"/>

                        <GradientStop Color="{Binding Path=DarkenColorBrush}" Offset="1.0"/>
                    </LinearGradientBrush>
                </Polygon.Fill>
            </Polygon>
            <Polygon Points="0,0 20,0 0,20"  HorizontalAlignment="Right" VerticalAlignment="Bottom">
                <Polygon.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                        <GradientStop Color="{Binding Path=LightenColorBrush}" Offset="0.0"/>

                        <GradientStop Color="{Binding Path=DarkenColorBrush}" Offset="1.0"/>
                    </LinearGradientBrush>
                </Polygon.Fill>
                <Polygon.BitmapEffect>
                    <DropShadowBitmapEffect Color="Black" Opacity="0.4" Direction="135" ShadowDepth="3"/>
                </Polygon.BitmapEffect>
            </Polygon>
            <TextBox x:Name="Editor"
                     Text="{Binding Text, Mode=TwoWay}"
                     Background="Transparent"
                     Visibility="{Binding IsEditable, Converter={StaticResource BoolToVis}}"
                     HorizontalAlignment="Center"
                     VerticalAlignment="Center"
                     HorizontalContentAlignment="Center"
                     VerticalContentAlignment="Center"
                     AcceptsReturn="True"
                     TextWrapping="Wrap"
                     BorderThickness="1">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="LostFocus">
                        <i:InvokeCommandAction Command="{Binding LoseFocus}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <Button Visibility="{Binding IsNotEditable, Converter={StaticResource BoolToVis}}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding MouseDoubleClick}" CommandParameter="{Binding ElementName=Editor}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Button.Template>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Background="Transparent"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch">
                            <TextBlock Text="{Binding Text}"
                                       TextWrapping="Wrap"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       TextAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Button.Template>
            </Button>

        </Grid>
        <Button Style="{DynamicResource ButtonStyle1}" Height="30" 
                Width="30" 
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                HorizontalContentAlignment="Center"
                VerticalContentAlignment="Center"
                Background="Transparent"
                FontSize="24"
                Padding="0"
                BorderThickness="0"
                Command="{Binding ClickDelete}"
                CommandParameter="{Binding Model}">
            <TextBlock Style="{DynamicResource TextBlockStyle1}" Text="x" Margin="0,-7,0,0" FontWeight="Bold">
                <TextBlock.Effect>
                    <DropShadowEffect
                        ShadowDepth="1"
                        Direction="330"/>
                </TextBlock.Effect>
            </TextBlock>
        </Button>
    </Grid>
</UserControl>
